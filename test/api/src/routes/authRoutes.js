const express = require( 'express' );
const mongoose = require( 'mongoose' );
const jwt = require( 'jsonwebtoken' );
const { JWT_SECRET } = require( '../config/keys' );
const User = mongoose.model( 'User' );
const requireAuth = require( '../middlewares/requireAuth' );
const sendEmail = require( '../services/nodemailer' );

const router = express.Router();

router.post( '/signup', async ( req, res ) => {
  // get the firstName, lastName, email, and password from the request
  const { firstName, lastName, email, password } = req.body;
  try {
    // create a new user using the mongoose User model
    const user = new User({ firstName, lastName, email, password });
    // save the newly created user to the db
    await user.save();
    // create a token using the jwt secret and the unique id generated by the database for the new user
    const token = jwt.sign( { userId: user._id }, JWT_SECRET );
    // send the token back to the client in the response
    res.status( 201 ).send({ token });
  } catch ( err ) {
    return res.status( 422 ).send({ error: err.userMessage });
  }
});

router.post( '/login', async ( req, res ) => {
  // get the email and password from the request
  const { email, password } =  req.body;
  if ( !email || !password ) {
    // return an error if no email or password is found in the request
    return res.status( 422 ).send({ error: 'One or more required fields are missing.'});
  }
  // find the user in the database using the email provided in the request
  const user = await User.findOne({ email });
  if ( user === null ) {
    // return an error if no user is found with a matching email
    // *** return a more general error message and status when handling authentication errors ***
    return res.status( 404 ).send({ error: 'Invalid email or password.' });
  }
  try {
    // call the comparePassword method set up for the userSchema in models/User.js
    await user.comparePassword( password );
    // create a token using the jwt secret and the user's id
    const token = jwt.sign( { userId: user._id }, JWT_SECRET );
    // send the token in the response
    res.status( 200 ).send({ token });
  } catch ( err ) {
    // handle errors thrown by the comparePassword method if the passwords don't match
    // *** return a more general error message and status when handling authentication errors ***
    return res.status( 404 ).send({ error: 'Invalid email or password.' });
  }
});

router.post( '/sendResetLink', async ( req, res ) => {
  // get the email from the request
  const { email } = req.body;
  if ( !email ) {
    // thrown an error if no email is found in the request
    return res.status( 422 ).send({ error: 'One or more required fields are missing.' });
  }
  // find the user in the database using the email provided in the request
  const user = await User.findOne({ email });
  if ( user === null ) {
    // if no user is found with a matching email
    /*** message to send if the email provided was not found to be associated with an existing account ***/
    const message = 'You are receiving this email because a request was made to reset the password associated with your account. Unfortunately, no account associated with this email address was found. If you did not make this request, please ignore this email. Otherwise, please confirm that the email in question is in fact the email you used when signing up for an account with us. Sorry for any inconvenience.';
    // send en email to the email address provided in the request
    await sendEmail( email, message ).catch( console.error );
    // *** here we don't want to confirm or deny the existence on an account ***
    return res.status( 200 ).send();
  }
  try {
    // create a random string
    const passwordResetCode = Math.random().toString(36).substr(2, 9);
    // set the random string as the passwordResetCode for the user
    user.passwordResetCode = passwordResetCode;
    // save the user to the db
    await user.save();
    // url containing newly generated passwordResetCode
    /*** make sure this url will direct the user to a route on the frontend that will allow them to reset their password ***/
    const url = `http://localhost:3333/resetPassword/${ passwordResetCode }`;
    /* message sent to user containing password reset link */
    const message = `Click on the link below to reset your password.\n${ url }`;
    // send en email to the email address provided in the request
    await sendEmail( email, message ).catch( console.error );
    return res.status( 200 ).send();
  } catch ( err ) {
    console.log( err );
    // handle errors
    return res.send({ error: 'Sorry, something went wrong and we were unable to process your request. We apologize for the inconvenience. If the problem persists, please contact support.' });
  }
});

router.post( '/validatePasswordResetCode', async ( req, res ) => {
  // get the passwordResetCode from the request
  const { passwordResetCode } = req.body;
  if ( !passwordResetCode ) {
    // return an error if no passwordResetCode is found in the request
    // *** return a more general error message and status when handling authentication errors ***
    return res.status( 422 ).send({ error: 'Invalid request.'});
  }
  // find the user in the database using the passwordResetCode provided in the request
  const user = await User.findOne({ passwordResetCode });
  if ( user === null ) {
    // return an error if no user is found with a matching passwordResetCode
    // *** return a more general error message and status when handling authentication errors ***
    return res.status( 401 ).send({ error: 'Invalid request.' });
  }
  return res.status( 200 ).send();
});

router.post( '/resetPassword', async ( req, res ) => {
  // get the id and password from the request
  const { passwordResetCode, password } = req.body;
  if ( !password ) {
    // return an error if no password is found in the request
    return res.status( 422 ).send({ error: 'One or more required fields are missing' });
  }
  // find the user in the database using the passwordResetCode provided in the request
  const user = await User.findOne({ passwordResetCode });
  if ( user === null ) {
    // return an error if no user is found with a matching passwordResetCode
    // *** return a more general error message and status when handling authentication errors ***
    return res.status( 401 ).send({ error: 'Invalid request.' });
  }
  // unset the passwordResetCode and update the user's password in the db
  user.updateOne({ $unset: [ passwordResetCode ], $set: { password } });
  return res.status( 200 ).send();
});

router.get( '/validateToken', requireAuth, ( req, res ) => {
  res.status( 200 ).send();
});

module.exports = router;
